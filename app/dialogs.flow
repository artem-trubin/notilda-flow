import material/material_dialog;

export {
  showConfirmationDialog(
    manager : MaterialManager,
    text : string,
    onConfirm : () -> void,
    onCancel : () -> void,
  ) -> void;

  showUnsavedChangesDialog(
    manager : MaterialManager,
    text : string,
    onSave : () -> void,
    onCancel : () -> void,
    onWithoutSave : () -> void,
  ) -> void;
}

showConfirmationDialog(
  manager : MaterialManager,
  text : string,
  onConfirm : () -> void,
  onCancel : () -> void,
) -> void {
  closeWhen = make(false);

  dialogText = MText(text, []);

  confirmButton = MTextButton(
    "CONFIRM",
    \ -> {
      next(closeWhen, true);
      onConfirm();
    },
    [],
    []
  );
  cancelButton = MTextButton(
    "CANCEL",
    \ -> {
      next(closeWhen, true);
      onCancel();
    },
    [],
    []
  );

  ShowMDialog(
    manager,
    closeWhen,
    [
      MDialogUseFrame(),
      MDialogActions([cancelButton, confirmButton]),
    ],
    dialogText,
  );
}

showUnsavedChangesDialog(
  manager : MaterialManager,
  text : string,
  onSave : () -> void,
  onCancel : () -> void,
  onWithoutSave : () -> void,
) -> void {
  closeWhen = make(false);

  closeAndAction = \fn -> {
    fn();
    next(closeWhen, true);
  }

  dialogText = MText(text, []);

  saveButton = MTextButton(
    "SAVE AND EXIT",
    \ -> closeAndAction(onSave),
    [],
    []
  );

  cancelButton = MTextButton(
    "CANCEL",
    \ -> closeAndAction(onCancel),
    [],
    []
  );

  withoutSaveButton = MTextButton(
    "CLOSE WITHOUT SAVING",
    \ -> closeAndAction(onWithoutSave),
    [],
    []
  );

  ShowMDialog(
    manager,
    closeWhen,
    [
      MDialogUseFrame(),
      MDialogActions([cancelButton, withoutSaveButton, saveButton]),
    ],
    dialogText,
  )
}
