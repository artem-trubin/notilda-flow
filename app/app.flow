import material/material;

import app/note/note;
import app/editor;

export {
  makeApp() -> MAppStructure;
}

makeApp() -> MAppStructure {

  // Initial work with data

  mockTextForNotes = [
    "Test note",
    "Second test note",
    "Third super ttest note",
  ];

  notesB : DynamicBehaviour<[Note]> = make(
    map(
      mockTextForNotes,
      \noteText -> Note(makeNoteId(), noteText)
    )
  );

  currentNoteMB : DynamicBehaviour<Maybe<Note>> = make(None());

  // Note functions

  addNote = \note : Note -> {
    next(notesB, arrayPush(getValue(notesB), note))
  };

  deleteNote = \noteId : string -> {
    next(
      notesB,
      filter(
        getValue(notesB),
        \note -> note.id != noteId
      )
    )
  };

  startEditingNote = \noteId : string -> {
    noteToEditM = find(getValue(notesB), \note -> note.id == noteId);

    eitherFn(
      noteToEditM,
      \noteToEdit -> {
        next(currentNoteMB, Some(noteToEdit))
      },
      \ -> println("Error: can't find not with such ID")
    )
  };

  saveNote = \updatedNote : Note -> {
    next(
      notesB,
      map(
        getValue(notesB),
        \note -> if (note.id == updatedNote.id) updatedNote else note
      )
    )
  };

  // UI elements

  notesList = MSelect(
    notesB,
    \notes -> MLines(
      map(
        notes,
        \note -> makeNoteCard(
          note,
          deleteNote,
          startEditingNote,
        )
      )
    )
  );

  content = MContent(
    MCols([
      MLines([
        notesList,
        AddNoteButton(addNote),
      ]),
      NoteEditor(currentNoteMB, saveNote),
    ])
  );

  MAppStructure([content], []);
}
