import material/material;

import app/state;
import app/note;
import app/editor;
import app/vault;
import app/userProfilePage;

export {
  makeApp() -> MAppStructure;
}

makeApp() -> MAppStructure {

  // Initial work with data

  state = makeInitialState();

  mockTextForNotes = [
    "Test note",
    "Second test note",
    "Third super ttest note",
  ];

  next(
    state.notesB,
    map(mockTextForNotes, \noteText -> Note(makeNoteId(), noteText))
  );

  leftNavExpanderB = make(false);

  // Note functions

  addNote = \note : Note -> {
    next(state.notesB, arrayPush(getValue(state.notesB), note))
  };

  deleteNote = \noteId : string -> {
    next(
      state.notesB,
      filter(
        getValue(state.notesB),
        \note -> note.id != noteId
      )
    )
  };

  startEditingNote = \noteId : string -> {
    noteToEditM = find(getValue(state.notesB), \note -> note.id == noteId);

    eitherFn(
      noteToEditM,
      \noteToEdit -> {
        next(state.currentNoteMB, Some(noteToEdit))
      },
      \ -> println("Error: can't find not with such ID")
    )
  };

  saveNote = \updatedNote : Note -> {
    next(
      state.notesB,
      map(
        getValue(state.notesB),
        \note -> if (note.id == updatedNote.id) updatedNote else note
      )
    )
  };

  // UI elements

  notesList = MSelect(
    state.notesB,
    \notes -> MLines(
      map(
        notes,
        \note -> makeNoteCard(
          note,
          deleteNote,
          startEditingNote,
        )
      )
    )
  );

  pageButtonsList = MLines([
    MTextButton(
      "Vault",
      \ -> {
        next(state.currentPageB, PageTypeVault());
        reverseBehaviour(leftNavExpanderB);
      },
      [],
      []
    ),
    MTextButton(
      "User Profile",
      \ -> {
        next(state.currentPageB, PageTypeUserProfile());
        reverseBehaviour(leftNavExpanderB);
      },
      [],
      []
    ),
  ]);

  page = MSelect(state.currentPageB, \currentPageType -> {
    switch (currentPageType) {
      PageTypeVault() : makePageVault(state);
      PageTypeUserProfile() : makePageUserProfile(state);
      default : MText("default page", []);
    }
  });

  leftNavHeader = MSNSmallHead([MText("Test", [])]);
  leftNav = MLeftNav(
    MSideNav(
      MSNSmallHead([MText("This will be header", [])]),
      pageButtonsList,
      leftNavExpanderB,
      []
    ),
    leftNavExpanderB,
    []
  );

  topToolBar = MAppBar(
    MSelect(
      state.userB,
      \user -> MToolbar(leftNavExpanderB, MText("Notilda", []), [MText(formatString("Welcome, %1", [user.name]), [])], [])
    )
  );

  MAppStructure([MContent(page), leftNav, topToolBar], []);
}
